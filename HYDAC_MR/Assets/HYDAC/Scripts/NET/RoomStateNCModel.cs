using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace HYDAC.Scripts.NET
{
    [RealtimeModel]
    public partial class RoomStateNCModel 
    {
        [RealtimeProperty(1, true, true)]
        private string _currentAssemblyName;
        
        [RealtimeProperty(2, true, true)]
        private bool _isAssembled;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace HYDAC.Scripts.NET {
    public partial class RoomStateNCModel : RealtimeModel {
        public string currentAssemblyName {
            get {
                return _currentAssemblyNameProperty.value;
            }
            set {
                if (_currentAssemblyNameProperty.value == value) return;
                _currentAssemblyNameProperty.value = value;
                InvalidateReliableLength();
                FireCurrentAssemblyNameDidChange(value);
            }
        }
        
        public bool isAssembled {
            get {
                return _isAssembledProperty.value;
            }
            set {
                if (_isAssembledProperty.value == value) return;
                _isAssembledProperty.value = value;
                InvalidateReliableLength();
                FireIsAssembledDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(RoomStateNCModel model, T value);
        public event PropertyChangedHandler<string> currentAssemblyNameDidChange;
        public event PropertyChangedHandler<bool> isAssembledDidChange;
        
        public enum PropertyID : uint {
            CurrentAssemblyName = 1,
            IsAssembled = 2,
        }
        
        #region Properties
        
        private ReliableProperty<string> _currentAssemblyNameProperty;
        
        private ReliableProperty<bool> _isAssembledProperty;
        
        #endregion
        
        public RoomStateNCModel() : base(null) {
            _currentAssemblyNameProperty = new ReliableProperty<string>(1, _currentAssemblyName);
            _isAssembledProperty = new ReliableProperty<bool>(2, _isAssembled);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _currentAssemblyNameProperty.UnsubscribeCallback();
            _isAssembledProperty.UnsubscribeCallback();
        }
        
        private void FireCurrentAssemblyNameDidChange(string value) {
            try {
                currentAssemblyNameDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireIsAssembledDidChange(bool value) {
            try {
                isAssembledDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _currentAssemblyNameProperty.WriteLength(context);
            length += _isAssembledProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _currentAssemblyNameProperty.Write(stream, context);
            writes |= _isAssembledProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.CurrentAssemblyName: {
                        changed = _currentAssemblyNameProperty.Read(stream, context);
                        if (changed) FireCurrentAssemblyNameDidChange(currentAssemblyName);
                        break;
                    }
                    case (uint) PropertyID.IsAssembled: {
                        changed = _isAssembledProperty.Read(stream, context);
                        if (changed) FireIsAssembledDidChange(isAssembled);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _currentAssemblyName = currentAssemblyName;
            _isAssembled = isAssembled;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
